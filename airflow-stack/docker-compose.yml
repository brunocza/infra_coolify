# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.10.5
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
# docker compose --env-file .env up -d

version: '3.8'

services:
  postgres:
    env_file:
      - .env
    image: postgres:13
    hostname: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    env_file:
      - .env
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    hostname: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    build: ${AIRFLOW_BUILD_PATH}
    env_file:
      - .env
    command: bash -c "mkdir -p /opt/airflow/logs && chmod -R 777 /opt/airflow/logs && airflow webserver"
    hostname: airflow-webserver
    ports:
      - "8082:8080"  # Alterado de "8080:8080" para "8081:8080"
    labels:
      - coolify.managed=true
      - traefik.enable=true
      - "traefik.http.routers.airflow-webserver.rule=Host(`${DOMAIN:-airflow.localhost}`) && PathPrefix(`/`)"
      - "traefik.http.routers.airflow-webserver.entryPoints=http"
      - "traefik.http.services.airflow-webserver.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - airflow-logs-volume:/opt/airflow/logs
      - git-sync-volume:/git
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    build: ${AIRFLOW_BUILD_PATH}
    env_file:
      - .env
    command: bash -c "mkdir -p /opt/airflow/logs && chmod -R 777 /opt/airflow/logs && airflow scheduler"
    hostname: airflow-scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - airflow-logs-volume:/opt/airflow/logs
      - git-sync-volume:/git
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    build: ${AIRFLOW_BUILD_PATH}
    env_file:
      - .env
    command: bash -c "mkdir -p /opt/airflow/logs && chmod -R 777 /opt/airflow/logs && airflow celery worker"
    hostname: airflow-worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - airflow-logs-volume:/opt/airflow/logs
      - git-sync-volume:/git
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    build: ${AIRFLOW_BUILD_PATH}
    env_file:
      - .env
    command: bash -c "mkdir -p /opt/airflow/logs && chmod -R 777 /opt/airflow/logs && airflow triggerer"
    hostname: airflow-triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - airflow-logs-volume:/opt/airflow/logs
      - git-sync-volume:/git
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    build: ${AIRFLOW_BUILD_PATH}
    env_file:
      - .env
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        mkdir -p /opt/airflow/logs
        chmod -R 777 /opt/airflow/logs
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/logs
        
        # Create all required log subdirectories with proper permissions
        mkdir -p /opt/airflow/logs/scheduler /opt/airflow/logs/web /opt/airflow/logs/worker /opt/airflow/logs/dag_processor_manager /opt/airflow/logs/triggerer
        chmod -R 777 /opt/airflow/logs
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/logs
        
        airflow db init




        airflow users create \
        --username ${_AIRFLOW_WWW_USER_USERNAME:-airflow} \
        --firstname Airflow \
        --lastname Admin \
        --role Admin \
        --email admin@example.com \
        --password ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}



        exec /entrypoint airflow version
    hostname: airflow-init
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
      - airflow-logs-volume:/opt/airflow/logs

  airflow-cli:
    build: ${AIRFLOW_BUILD_PATH}
    env_file:
      - .env
    profiles:
      - debug
    environment:
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - airflow-logs-volume:/opt/airflow/logs

  flower:
    build: ${AIRFLOW_BUILD_PATH}
    env_file:
      - .env
    command: bash -c "mkdir -p /opt/airflow/logs && chmod -R 777 /opt/airflow/logs && airflow celery flower"
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - airflow-logs-volume:/opt/airflow/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  git-sync:
    build:
      context: ./git-sync
    container_name: git-sync
    hostname: git-sync
    user: "0"
    env_file:
      - .env
    environment:
      - GIT_SYNC_REPO=${GIT_SYNC_REPO}
      - GIT_SYNC_BRANCH=${GIT_SYNC_BRANCH}
      - GIT_SYNC_WAIT=${GIT_SYNC_WAIT:-60}
      - GIT_SYNC_SSH=${GIT_SYNC_SSH:-true}
      - GIT_SSH_KEY_FILE=/etc/git-secret/id_rsa
      - GIT_KNOWN_HOSTS=${GIT_KNOWN_HOSTS:-false}
      - GIT_SYNC_ROOT=${GIT_SYNC_ROOT:-/git}
      - GIT_SYNC_DEST=${GIT_SYNC_DEST:-repo}
      - GIT_SYNC_SUBPATH=${GIT_SYNC_SUBPATH:-dags}
    volumes:
      - git-sync-volume:/git
    restart: always

volumes:
  postgres-db-volume:
    driver: local
  git-sync-volume:
    driver: local
  airflow-logs-volume:
    driver: local

networks:
  default:
    # Use COOLIFY_NETWORK_EXTERNAL to determine if the network is external
    external: ${COOLIFY_NETWORK_EXTERNAL:-false}
    # Only use the COOLIFY_NETWORK name if the network is external
    name: ${COOLIFY_NETWORK_EXTERNAL:-false}_later_value_placeholder_${COOLIFY_NETWORK:-airflow_network}
